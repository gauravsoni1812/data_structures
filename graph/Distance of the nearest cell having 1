https://practice.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=distance-of-nearest-cell-having-1

vector<vector<int>> nearest(vector<vector<int>> grid)
{
    // Code here
    int n = grid.size();
    int m = grid[0].size();
    queue<pair<pair<int, int>, int>> q;
    vector<vector<int>> visited(n, vector<int>(m, false));
    vector<vector<int>> ans(n, vector<int>(m, 0));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (grid[i][j] == 1)
            {
                q.push({{i, j}, 0});
                visited[i][j] = true;
            }
        }
    }
    int delr[] = {-1, 0, +1, 0};
    int delc[] = {0, +1, 0, -1};
    while (!q.empty())
    {
        int row = q.front().first.first;
        int col = q.front().first.second;
        int data = q.front().second;
        q.pop();
        ans[row][col] = data;
        for (int i = 0;i < 4;i++)
        {
            int nrow = row + delr[i];
            int ncol = col + delc[i];
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !visited[nrow][ncol])
            {
                visited[nrow][ncol] = true;
                q.push({{nrow, ncol}, data + 1});
            }
        }
    }
    return ans;
}
